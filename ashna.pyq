class ListNode:
    def __init__(self, val=0, next=None):
        self.val = val
        self.next = next

def addTwoNumbers(l1, l2):
    dummy_head = ListNode(0)
    current = dummy_head
    carry = 0
    
    while l1 or l2:
        x = l1.val if l1 else 0
        y = l2.val if l2 else 0
        total = carry + x + y
        carry = total // 10
        current.next = ListNode(total % 10)
        current = current.next
        
        if l1:
            l1 = l1.next
        if l2:
            l2 = l2.next
    
    if carry > 0:
        current.next = ListNode(carry)
    
    return dummy_head.next

# Helper function to create a linked list from a list
def createLinkedList(lst):
    dummy_head = ListNode(0)
    current = dummy_head
    for number in lst:
        current.next = ListNode(number)
        current = current.next
    return dummy_head.next

# Helper function to convert a linked list to a list
def linkedListToList(node):
    lst = []
    while node:
        lst.append(node.val)
        node = node.next
    return lst

# Test cases
l1 = createLinkedList([2, 4, 3])
l2 = createLinkedList([5, 6, 4])
result = addTwoNumbers(l1, l2)
print(linkedListToList(result))  # Output: [7, 0, 8]

l1 = createLinkedList([0])
l2 = createLinkedList([0])
result = addTwoNumbers(l1, l2)
print(linkedListToList(result))  # Output: [0]
